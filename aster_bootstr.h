#ifndef ASTER_BOOTSTR_H
#define ASTER_BOOTSTR_H

const char *aster_bootstr = ""
": ['] ' ; compile-only "
": [char] char postpone literal ; compile-only "
": cr 10 emit ; "
"32 constant bl "
": space bl emit ; "
": cells cell * ; "
": cell+ cell + ; "
": chars ; "
": char+ 1+ ; "
": hex 16 base ! ; "
": decimal 10 base ! ; "
"-1 constant true "
"0 constant false "
": negate invert 1+ ; "
": begin r> here >r >r ; compile-only "
": until r> r> postpone jz, >r ; compile-only "
": while r> r> 0 postpone jz, here cell - >r >r >r ; compile-only "
": repeat r> r> postpone jmp, here r> ! >r ; compile-only "
": again r> r> postpone jmp, >r ; compile-only "
": spaces begin dup while 1- space repeat drop ; "
": if r> 0 postpone jz, here cell - >r >r ; compile-only "
": then r> here r> ! >r ; compile-only "
": else r> 0 postpone jmp, here r> ! here cell - >r >r ; compile-only "
": (do) r> -rot >r >r >r ; "
": do postpone (do) r> 0 >r -1 >r here >r >r ; compile-only "
": leave 0 postpone jmp, "
"  0 begin 1+ r> swap over -1 = until "
"  r> 1+ here cell - >r >r "
"  begin swap >r 1- dup 0= until drop ; compile-only "
": unloop r> r> r> 2drop >r ; "
": (loop) r> r> r> 1+ 2dup = -rot >r >r swap >r ; "
": loop postpone (loop) r> r> postpone jz, "
"  r> drop r> begin dup while 1- here r> ! repeat drop "
"  postpone unloop >r ; compile-only "
": (+loop) r> swap r> r> rot >r 2dup >= -rot r> + 2dup >= -rot "
"  >r >r <> swap >r ; "
": +loop postpone (+loop) r> r> postpone jz, "
"  r> drop r> begin dup while 1- here r> ! repeat drop "
"  postpone unloop >r ; compile-only "
": i r> r> r> dup -rot >r >r swap >r ; "
": j r> r> r> r> r> dup -rot >r >r swap >r -rot >r >r ; "
": type 0 do dup c@ emit 1+ loop drop ; "
": s\" [char] \" parse dup save-string "
"  state @ if "
"  swap postpone literal postpone literal then ; immediate "
": .\" [char] \" parse "
"  state @ if dup save-string "
"  swap postpone literal postpone literal "
"  postpone type else type then ; immediate "
": .( [char] ) parse "
"  state @ if dup save-string "
"  swap postpone literal postpone literal "
"  postpone type else type then ; immediate "
": c\" [char] \" parse "
"  dup -rot -1 swap 1- do dup i + c@ over i + 1+ c! -1 +loop "
"  swap dup 1+ save-string over c! "
"  state @ if postpone literal then ; immediate "
": count dup 1+ swap c@ ; "
": value constant ; "
": to ' user + "
"  state @ if postpone literal postpone ! else ! then ; immediate "
": [ state 1 state ! ; compile-only "
": ] 1 state ! ; "
": , here ! cell allot ; "
": c, here c! 1 allot ; "
": accept tuck 0 do key dup 10 = if 2drop drop i unloop exit then "
"  over i + c! loop drop ; "
": max 2dup > if drop else nip then ; "
": min 2dup < if drop else nip then ; "
": rshift 0 do 2* loop ; "
": lshift 0 do 2/ loop ; "
": +! tuck @ + swap ! ; "
": throw if error then ; "
": fill swap 0 do 2dup swap i + c! loop 2drop ; "
": erase 0 fill ; "
": move 0 do over i + c@ over i + c! loop 2drop ; "
": cmove move ; "
"";

#endif
